{
  "swaggerDoc": {
    "openapi": "3.0.1",
    "info": {
      "title": "Robot Art Public API",
      "description": "The Robot Art API is made available by Mondo Robot for prospective engineering hires who are implementing the \"Robot Art\" skills test. The APIs were constructed to allow for more rapid development and to reduce the overhead of the interview process. In order to gain access to the API you must first request a valid API key. Please contact us using the link below to request yours.",
      "contact": {
        "email": "info@mondorobot.com"
      },
      "version": "1.0.0"
    },
    "servers": [
      {
        "url": "https://mondo-robot-art-api.herokuapp.com",
        "description": "Production server"
      },
      {
        "url": "/",
        "description": "Relative to where docs are hosted"
      }
    ],
    "paths": {
      "/users/": {
        "get": {
          "tags": [
            "/users"
          ],
          "summary": "Returns all users",
          "description": "Returns all users for the application",
          "operationId": "getAllUsers",
          "responses": {
            "200": {
              "description": "successful operation",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Error_401"
            },
            "403": {
              "$ref": "#/components/responses/Error_403"
            }
          },
          "security": [
            {
              "bearerAuth": []
            }
          ]
        }
      },
      "/users/{id}": {
        "get": {
          "tags": [
            "/users"
          ],
          "summary": "Find user by ID",
          "description": "Be sure to include the full userId record when searching for user details.",
          "operationId": "getUserById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of the user that needs to be fetched",
              "example": "75813a325bf0f7cce2137f14b4743e6b",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid user ID supplied",
              "content": {}
            },
            "401": {
              "$ref": "#/components/responses/Error_401"
            },
            "403": {
              "$ref": "#/components/responses/Error_403"
            },
            "404": {
              "description": "User not found",
              "content": {}
            }
          },
          "security": [
            {
              "bearerAuth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "/users"
          ],
          "summary": "Delete user by ID",
          "description": "For valid response try integer IDs with positive integer value.         Negative\nor non-integer values will generate API errors",
          "operationId": "deleteUserById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of the user that needs to be deleted",
              "example": "75813a325bf0f7cce2137f14b4743e6b",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User successfully deleted"
            },
            "400": {
              "description": "Invalid User Id supplied"
            },
            "401": {
              "$ref": "#/components/responses/Error_401"
            },
            "403": {
              "$ref": "#/components/responses/Error_403"
            },
            "404": {
              "description": "User not found"
            }
          },
          "security": [
            {
              "bearerAuth": []
            }
          ]
        }
      },
      "/auth/register": {
        "post": {
          "tags": [
            "/auth"
          ],
          "summary": "Register a new user",
          "operationId": "createUser",
          "requestBody": {
            "description": "Allows you to create a new user in the system with specified name, email, and password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "successful operation",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid User"
            },
            "401": {
              "$ref": "#/components/responses/Error_401"
            },
            "403": {
              "$ref": "#/components/responses/Error_403"
            }
          },
          "security": [
            {
              "api_key": []
            }
          ]
        }
      },
      "/auth/session": {
        "get": {
          "tags": [
            "/auth"
          ],
          "summary": "Get user session",
          "description": "Returns valid session information",
          "operationId": "getUserSession",
          "responses": {
            "200": {
              "description": "successful operation",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request"
            },
            "401": {
              "$ref": "#/components/responses/Error_401"
            },
            "403": {
              "$ref": "#/components/responses/Error_403"
            }
          },
          "security": [
            {
              "bearerAuth": []
            }
          ]
        },
        "post": {
          "tags": [
            "/auth"
          ],
          "summary": "Create a new session",
          "operationId": "createSession",
          "requestBody": {
            "description": "Email, password, and x-robot-art-api-key header required to authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Auth"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "successful operation",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "token": {
                        "type": "string",
                        "example": "xxxxx.yyyyy.zzzzz"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Missing required input"
            },
            "401": {
              "description": "Failed to login. Please check credentials and try again"
            },
            "403": {
              "$ref": "#/components/responses/Error_403"
            }
          },
          "security": [
            {
              "api_key": []
            }
          ]
        },
        "delete": {
          "tags": [
            "/auth"
          ],
          "summary": "Delete user session",
          "description": "Delete session will utilize the Bearer token from the \"Authorization\" header.",
          "operationId": "deleteUserSession",
          "responses": {
            "200": {
              "description": "Session successfully deleted"
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "401": {
              "$ref": "#/components/responses/Error_401"
            },
            "403": {
              "$ref": "#/components/responses/Error_403"
            },
            "404": {
              "description": "Session not found"
            }
          },
          "security": [
            {
              "bearerAuth": []
            }
          ]
        }
      },
      "/robots/": {
        "get": {
          "tags": [
            "/robots"
          ],
          "summary": "Returns all robots",
          "description": "Returns all robots for the application",
          "operationId": "getAllRobots",
          "responses": {
            "200": {
              "description": "successful operation",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Robot"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Error_401"
            },
            "403": {
              "$ref": "#/components/responses/Error_403"
            }
          },
          "security": [
            {
              "bearerAuth": []
            }
          ]
        },
        "post": {
          "tags": [
            "/robots"
          ],
          "summary": "Create a new robot",
          "operationId": "createRobot",
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "image": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                },
                "encoding": {
                  "profileImage": {
                    "contentType": "image/png, image/jpeg, image/jpg"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "successful operation",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Robot"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid Robot"
            },
            "401": {
              "$ref": "#/components/responses/Error_401"
            },
            "403": {
              "$ref": "#/components/responses/Error_403"
            }
          },
          "security": [
            {
              "bearerAuth": []
            }
          ]
        }
      },
      "/robots/{id}": {
        "get": {
          "tags": [
            "/robots"
          ],
          "summary": "Find robot by ID",
          "description": "Be sure to include the full robotId record when searching for robot details.",
          "operationId": "getRobotById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of the robot that needs to be fetched",
              "example": "75813a325bf0f7cce2137f14b4743e6b",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Robot"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "401": {
              "$ref": "#/components/responses/Error_401"
            },
            "403": {
              "$ref": "#/components/responses/Error_403"
            },
            "404": {
              "description": "Robot not found",
              "content": {}
            }
          },
          "security": [
            {
              "bearerAuth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "/robots"
          ],
          "summary": "Delete robot by ID",
          "description": "Deletes a robot record from the database",
          "operationId": "deleteRobotById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of the robot that needs to be deleted",
              "example": "75813a325bf0f7cce2137f14b4743e6b",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Robot successfully deleted"
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "401": {
              "$ref": "#/components/responses/Error_401"
            },
            "403": {
              "$ref": "#/components/responses/Error_403"
            },
            "404": {
              "description": "Robot not found"
            }
          },
          "security": [
            {
              "bearerAuth": []
            }
          ]
        }
      },
      "/robots/{id}/votes": {
        "get": {
          "tags": [
            "/robots"
          ],
          "summary": "Get all votes by robot ID",
          "description": "Be sure to include the full robotId record when searching for robot details.",
          "operationId": "getVotesByRobotId",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of the robot that you want votes for",
              "example": "75813a325bf0f7cce2137f14b4743e6b",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Vote"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "401": {
              "$ref": "#/components/responses/Error_401"
            },
            "403": {
              "$ref": "#/components/responses/Error_403"
            },
            "404": {
              "description": "Robot not found"
            }
          },
          "security": [
            {
              "bearerAuth": []
            }
          ]
        }
      },
      "/votes/": {
        "get": {
          "tags": [
            "/votes"
          ],
          "summary": "Returns all votes",
          "description": "Returns all votes for the application",
          "operationId": "getAllVotes",
          "responses": {
            "200": {
              "description": "successful operation",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Vote"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Error_401"
            },
            "403": {
              "$ref": "#/components/responses/Error_403"
            }
          },
          "security": [
            {
              "bearerAuth": []
            }
          ]
        },
        "post": {
          "tags": [
            "/votes"
          ],
          "summary": "Create a new vote",
          "operationId": "createVote",
          "requestBody": {
            "description": "Vote created by user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoteCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "successful operation",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Vote"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid Vote",
              "content": {}
            },
            "401": {
              "$ref": "#/components/responses/Error_401"
            },
            "403": {
              "$ref": "#/components/responses/Error_403"
            }
          },
          "security": [
            {
              "bearerAuth": []
            }
          ]
        }
      },
      "/votes/{id}": {
        "delete": {
          "tags": [
            "/votes"
          ],
          "summary": "Delete vote by ID",
          "description": "For valid response try integer IDs with positive integer value.         Negative\nor non-integer values will generate API errors",
          "operationId": "deleteVoteById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of the vote that needs to be deleted",
              "example": "75813a325bf0f7cce2137f14b4743e6b",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Vote successfully deleted"
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "401": {
              "$ref": "#/components/responses/Error_401"
            },
            "403": {
              "$ref": "#/components/responses/Error_403"
            },
            "404": {
              "description": "Vote not found"
            }
          },
          "security": [
            {
              "bearerAuth": []
            }
          ]
        }
      },
      "/reset": {
        "post": {
          "tags": [
            "/reset"
          ],
          "summary": "Reset all candidate data",
          "description": "Removes all data tied to current candidate (users, votes, tokens, robots, robot images) and re-seeds the admin user and default robots",
          "operationId": "resetCandidateData",
          "responses": {
            "200": {
              "description": "successful operation"
            },
            "401": {
              "$ref": "#/components/responses/Error_401"
            },
            "403": {
              "$ref": "#/components/responses/Error_403"
            }
          },
          "security": [
            {
              "bearerAuth": []
            }
          ]
        }
      }
    },
    "components": {
      "schemas": {
        "Auth": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "required": true,
              "format": "email",
              "example": "admin@mondorobot.com"
            },
            "password": {
              "type": "string",
              "required": true,
              "format": "password",
              "example": "R0bot4Lif3"
            }
          }
        },
        "Robot": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "75813a325bf0f7cce2137f14b4743e6b"
            },
            "name": {
              "type": "string",
              "example": "Rosie"
            },
            "url": {
              "type": "string",
              "format": "url",
              "example": "https://storage.googleapis.com/4bd686f0295400e7fa21fb53c8ca6623/robots/5658e938fa7ef5d593bdb602f3cfe349.jpg"
            }
          }
        },
        "User": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "75813a325bf0f7cce2137f14b4743e6b"
            },
            "name": {
              "type": "string",
              "example": "admin"
            },
            "email": {
              "type": "string",
              "format": "email",
              "example": "admin@mondorobot.com"
            }
          }
        },
        "UserCreate": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "admin"
            },
            "email": {
              "type": "string",
              "format": "email",
              "example": "admin@mondorobot.com"
            },
            "password": {
              "type": "string",
              "format": "password",
              "example": "R0bot4Lif3"
            }
          }
        },
        "Vote": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "75813a325bf0f7cce2137f14b4743e6b"
            },
            "robot": {
              "type": "string",
              "example": "75813a325bf0f7cce2137f14b4743e6b"
            },
            "user": {
              "type": "string",
              "example": "75813a325bf0f7cce2137f14b4743e6b"
            }
          }
        },
        "VoteCreate": {
          "type": "object",
          "properties": {
            "robot": {
              "type": "string",
              "example": "75813a325bf0f7cce2137f14b4743e6b"
            }
          }
        }
      },
      "responses": {
        "Error_401": {
          "description": "Invalid token"
        },
        "Error_403": {
          "description": "Bearer token required"
        }
      },
      "securitySchemes": {
        "api_key": {
          "type": "apiKey",
          "name": "x-robot-art-api-key",
          "in": "header"
        },
        "bearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      }
    }
  },
  "customOptions": {}
}
