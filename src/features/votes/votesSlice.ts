import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import * as votesAPI from './votesAPI';
import * as constants from '../constants';

export interface IUserVote {
  robotId: string,
  voteId: string
}

export interface IVotesState {
  data: {
    votesByRobot: {[key: string]: number},
    userVote: IUserVote,
  },
  status: typeof constants.IDLE | typeof constants.PENDING | typeof constants.SOMETHING_BROKE
    | typeof constants.SERVER_ERROR | typeof constants.GET_VOTES_BY_ROBOT_SUCCESS | typeof constants.GET_VOTES_BY_ROBOT_FAILURE
    | typeof constants.GET_USER_VOTE_SUCCESS | typeof constants.GET_USER_VOTE_FAILURE
    | typeof constants.DELETE_VOTE_SUCCESS | typeof constants.DELETE_VOTE_FAILURE
    | typeof constants.CREATE_VOTE_SUCCESS | typeof constants.CREATE_VOTE_FAILURE;
}

export const votesInitialState: IVotesState = {
  data: {
    votesByRobot: {},
    userVote: {
      robotId: '',
      voteId: '',
    }
  },
  status: 'idle',
};

/**
 * creates AsyncThunk to be used with createSlice to create getVotesByRobot actions / reducers
 */
export const getVotesByRobotAsync  = createAsyncThunk(
  'votes/getVotesByRobot',
  async (token: string) => {
    const response: votesAPI.IGetVotesByRobotResponse = await votesAPI.getVotesByRobot(token)

    return response
  }
)

/**
 * creates AsyncThunk to be used with createSlice to create deleteVote actions / reducers
 */
export const deleteVoteAsync  = createAsyncThunk(
  'votes/deleteVote',
  async (config: { token: string, voteId: string }) => {
    const { token, voteId } = config
    const response: any = await votesAPI.deleteVote(token, voteId)

    return response
  }
)

/**
 * creates AsyncThunk to be used with createSlice to create createVote actions / reducers
 */
export const createVoteAsync = createAsyncThunk(
  'votes/createVote',
  async (config: { token: string, robotId: string }) => {
    const { token, robotId } = config
    const response: votesAPI.ICreateVoteResponse = await votesAPI.createVote(token, robotId)

    return response
  }
)

/**
 * creates AsyncThunk to be used with createSlice to create getUserVote actions / reducers
 */
export const getUserVoteAsync = createAsyncThunk(
  'votes/getUserVote',
  async (config: { token: string, userId: string }) => {
    const { token, userId } = config
    const response: votesAPI.IGetUserVoteResponse = await votesAPI.getUserVote(token, userId)

    return response
  }
)

/**
 * create a slice for robots data services
 */
export const votesSlice = createSlice({
  name: 'votes',
  initialState: votesInitialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    resetVotes: (state) => {
      state.data = votesInitialState.data
      state.status = votesInitialState.status
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // ----- getVotesByRobotAsync
      .addCase(getVotesByRobotAsync.pending, (state) => {
        state.status = constants.PENDING;
      })
      .addCase(getVotesByRobotAsync.fulfilled, (state, action) => {
        const { data, status } = action.payload
        const { votesByRobot } = data

        if (status === 200) {
          state.status = constants.GET_VOTES_BY_ROBOT_SUCCESS
          state.data.votesByRobot = votesByRobot
        }
        if (status >= 400 && status < 500) {
          // TODO: ideally we have better reasons why the login failed
          // ie: bad email, or bad password
          state.status = constants.GET_VOTES_BY_ROBOT_FAILURE
        }
        if (status >= 500) {
          state.status = constants.SERVER_ERROR
        }
      })
      .addCase(getVotesByRobotAsync.rejected, (state) => {
        state.status = constants.SOMETHING_BROKE
      })
      // ----- deleteVoteAsync
      .addCase(deleteVoteAsync.pending, (state) => {
        state.status = constants.PENDING;
      })
      .addCase(deleteVoteAsync.fulfilled, (state, action) => {
        const { status } = action.payload

        if (status === 200) {
          state.status = constants.DELETE_VOTE_SUCCESS
          state.data.userVote = votesInitialState.data.userVote
        }
        if (status >= 400 && status < 500) {
          state.status = constants.DELETE_VOTE_FAILURE
        }
        if (status >= 500) {
          state.status = constants.SERVER_ERROR
        }
      })
      .addCase(deleteVoteAsync.rejected, (state) => {
        state.status = constants.SOMETHING_BROKE
      })
      // ----- createVoteAsync
      .addCase(createVoteAsync.pending, (state) => {
        state.status = constants.PENDING;
      })
      .addCase(createVoteAsync.fulfilled, (state, action) => {
        const { status, data } = action.payload
        const { vote } = data
        const { id: voteId, robot: robotId } = vote

        if (status === 200) {
          state.status = constants.CREATE_VOTE_SUCCESS
          state.data.userVote = { voteId, robotId }
        }
        if (status >= 400 && status < 500) {
          state.status = constants.CREATE_VOTE_FAILURE
        }
        if (status >= 500) {
          state.status = constants.SERVER_ERROR
        }
      })
      .addCase(createVoteAsync.rejected, (state) => {
        state.status = constants.SOMETHING_BROKE
      })
      // ----- getUserVoteAsync
      .addCase(getUserVoteAsync.pending, (state) => {
        state.status = constants.PENDING;
      })
      .addCase(getUserVoteAsync.fulfilled, (state, action) => {
        const { status, data } = action.payload
        const { userVote } = data

        if (status === 200) {
          state.status = constants.GET_USER_VOTE_SUCCESS
          state.data.userVote = { voteId: userVote.id, robotId: userVote.robot }
        }
        if (status >= 400 && status < 500) {
          state.status = constants.GET_USER_VOTE_FAILURE
        }
        if (status >= 500) {
          state.status = constants.SERVER_ERROR
        }
      })
      .addCase(getUserVoteAsync.rejected, (state) => {
        state.status = constants.SOMETHING_BROKE
      })
      
  },
});

// export actions generated by createSlice()
export const { resetVotes } = votesSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectVotesByRobot = (state: RootState): { [key: string]: number } => state.votes.data.votesByRobot
export const selectVotesStatus = (state: RootState): string => state.votes.status
export const selectUserVote = (state: RootState): IUserVote => state.votes.data.userVote

export default votesSlice.reducer;
