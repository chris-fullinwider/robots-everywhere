import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { ILoginBody, login, IRegistrationBody, register, getSession, ILoginResponse, IRegistrationResponse, IGetSessionResponse } from './authAPI';

export const PENDING = 'pending'
export const IDLE = 'idle'
export const LOGIN_SUCCESS = 'login success'
export const LOGIN_FAILURE = 'login failed'
export const SERVER_ERROR = 'server error'
export const REGISTER_SUCCESS = 'register success'
export const REGISTER_FAILURE = 'register failed'
export const GET_SESSION_SUCCESS = 'get session success'
export const GET_SESSION_FAILURE = 'get session failed'
export const SOMETHING_BROKE = 'something broke'


export interface IAuthStateData {
  id: string | null,
  name: string | null,
  email: string | null,
  token: string | null,
  isAdmin: boolean | null,
}

export interface IAuthState {
  data: IAuthStateData,
  status: typeof IDLE | typeof PENDING | typeof LOGIN_SUCCESS| typeof LOGIN_FAILURE
    | typeof SERVER_ERROR | typeof REGISTER_SUCCESS | typeof REGISTER_FAILURE
    | typeof GET_SESSION_SUCCESS | typeof GET_SESSION_FAILURE | typeof SOMETHING_BROKE;
}

export const authInitialState: IAuthState = {
  data: {
    id: null,
    name: null,
    email: null,
    token: null,
    isAdmin: null,
  },
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
/**
 * creates AsyncThunk to be used with createSlice to create login actions / reducers
 */
export const loginAsync = createAsyncThunk(
  'auth/login',
  async (loginBody: ILoginBody) => {
    const response: ILoginResponse = await login(loginBody);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

/**
 * creates AsyncThunk to be used with createSlice to create registration actions / reducers
 */
export const registerAsync = createAsyncThunk(
  'auth/register',
  async (registrationBody: IRegistrationBody) => {
    const response: IRegistrationResponse = await register(registrationBody);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

/**
 * creates AsyncThunk to be used with createSlice to create getSession actions / reducers
 */
export const getSessionAsync = createAsyncThunk(
  'auth/getSession',
  async (token: string) => {
    const response: IGetSessionResponse = await getSession(token)
    return response
  }
)


export const authSlice = createSlice({
  name: 'auth',
  initialState: authInitialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    resetAll: (state) => {
      state.data = authInitialState.data
      state.status = authInitialState.status
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // ----- loginAsync
      .addCase(loginAsync.pending, (state) => {
        state.status = PENDING;
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        if (action.payload.status >= 200) {
          state.status = LOGIN_SUCCESS
          state.data.token = action.payload.token
        }
        if (action.payload.status >= 400) {
          // TODO: ideally we have better reasons why the login failed
          // ie: bad email, or bad password
          state.status = LOGIN_FAILURE
        }
      })
      .addCase(loginAsync.rejected, (state) => {
        state.status = SOMETHING_BROKE
      })
      // ----- registerAsync
      .addCase(registerAsync.pending, (state) => {
        state.status = PENDING;
      })
      .addCase(registerAsync.fulfilled, (state, action) => {
        if (action.payload.status === 200 ) {
          state.status = REGISTER_SUCCESS
        }
        if (action.payload.status >= 400 && action.payload.status < 500) {
          // TODO: ideally we have better reasons why the login failed
          // ie: bad email, or bad password
          state.status = REGISTER_FAILURE
        }
        if (action.payload.status >= 500) {
          // can't remember if a 500 response will come through from the PROMISE.fulfilled or trigger the catch
          state.status = SERVER_ERROR
        }
      })
      .addCase(registerAsync.rejected, (state) => {
        // would want to handle this a lot better, but that's detail work for later
        state.status = SOMETHING_BROKE
      })
      // ----- getSessionAsync
      .addCase(getSessionAsync.pending, (state) => {
        state.status = PENDING
      })
      .addCase(getSessionAsync.fulfilled, (state, action) => {
        const { status } = action.payload
        const { email, name, id } = action.payload.data

        if (status === 200) {
          state.data.name = name
          state.data.id = id
          state.data.email = email
          state.status = GET_SESSION_SUCCESS
        }
        if (action.payload.status >= 400 && action.payload.status < 500) {
          // TODO: ideally we have better reasons why the login failed
          // ie: bad email, or bad password
          state.status = GET_SESSION_FAILURE
        }
        if (action.payload.status >= 500) {
          // can't remember if a 500 response will come through from the PROMISE.fulfilled or trigger the catch
          state.status = SERVER_ERROR
        }
      })
  },
});

// export actions generated by createSlice()
export const { resetAll } = authSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectToken = (state: RootState): string | null => state.auth.data.token;
export const selectAuthStatus = (state: RootState): string => state.auth.status;
export const selectAuthData = (state: RootState): IAuthStateData => state.auth.data;

export default authSlice.reducer;
