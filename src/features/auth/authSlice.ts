import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { ILoginBody, login } from './authAPI';

export interface IAuthState {
  data: {
      id: string | null,
      name: string | null,
      email: string | null,
      token: string | null,
      isAdmin: boolean | null,
  }
  status: 'idle' | 'pending' | 'login success' | 'login failed' | 'server error';
}

const initialState: IAuthState = {
  data: {
    id: null,
    name: null,
    email: null,
    token: null,
    isAdmin: null,
  },
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loginAsync = createAsyncThunk(
  'auth/login',
  async (loginBody: ILoginBody) => {
    const response = await login(loginBody);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.pending, (state) => {
        state.status = 'pending';
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        if (action.payload.status >= 200) {
          state.status = 'login success'
          state.data = action.payload.data
        }
        if (action.payload.status >= 400) {
          // TODO: ideally we have better reasons why the login failed
          // ie: bad email, or bad password
          state.status = 'login failed'
        }
      })
      .addCase(loginAsync.rejected, (state, action) => {
        state.status = 'server error'
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectToken = (state: RootState): string | null => state.auth.data.token;
export const selectStatus = (state: RootState): string | null => state.auth.status;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (
//   dispatch,
//   getState
// ) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default authSlice.reducer;
